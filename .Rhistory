fisher.test(rbind(c(1,14),c(13,2)))
fisher.test(rbind(c(1,14),c(13,2)),alternative = "less")
fisher.test(rbind(c(1,14),c(13,2)),alternative = "equal")
fisher.test(rbind(c(1,14),c(13,2)))
qf(0.05,2,12)
qf(0.05,2,12,lower.tail=F)
1+2+5+10+20
38/6
0+9+21+47+105+213
395/6
x <- matrix(rnorm(100), nrow = 5)
dist(x)
dist(x, diag = TRUE)
dist(x, upper = TRUE)
m <- as.matrix(dist(x))
d <- as.dist(m)
x
install.packages(reshape2)
install.packages('reshape2')
library(reshape2)
data <- as.data.frame(rbind(c('a','b',1),c('b',))
)
data <- as.data.frame(rbind(c('a','b',1),c('b','a',2),c('a','a',5),c('a','c',10)))
View(data)
?cast
#Air quality example
names(airquality) <- tolower(names(airquality))
aqm <- melt(airquality, id=c("month", "day"), na.rm=TRUE)
acast(aqm, day ~ month ~ variable)
acast(aqm, month ~ variable, mean)
acast(aqm, month ~ variable, mean, margins = TRUE)
dcast(aqm, month ~ variable, mean, margins = c("month", "variable"))
rm(aqm)
rm(airquality)
View(data)
data.frame(a=(1,2,3))
data.frame(a=c(1,2,3))
data.frame(a=c(1,2,3),b=c(4,5,6))
data <- data.frame(from = c('a','b','a','a'), to = c('b','a','a','c'), fatalities = c(1,2,5,10))
View(data)
acast(data,from~to~fatalities)
as.data.frame(acast(data,from~to~fatalities))
?matrix
is.matrix(as.matrix(1:10))
!is.matrix(warpbreaks)  # data.frame, NOT matrix!
warpbreaks[1:10,]
as.matrix(warpbreaks[1:10,])
mdat <- matrix(c(1,2,3, 11,12,13), nrow = 2, ncol = 3, byrow = TRUE,
dimnames = list(c("row1", "row2"),
c("C.1", "C.2", "C.3")))
View(mdat)
?random
??random
irnorm(1,count=100)
library(iterators)
irnorm(1,count=100)
library(iterators)
irnorm(1,count=100)
.Random.seed <- c(rng.kind, n1, n2, \dots)
RNGkind(kind = NULL, normal.kind = NULL)
RNGversion(vstr)
set.seed(seed, kind = NULL, normal.kind = NULL)
?qqplot
round(rchisq(30,2))
round(rnorm(30,2))
round(rchisq(30,2))
round(rchisq(30,2))
round(rchisq(30,3))
round(rchisq(30,5))
,
data <- data.frame(decade1 = round(rchisq(30,2)),
decade2 = round(rchisq(30,5))
)
View(data)
data <- data.frame(decade1 = round(rchisq(100,2)),
decade2 = round(rchisq(300,5))
)
decade1 <- round(rchisq(100,2))
decade2 <- round(rchisq(300,5))
?qqplot
qqplot(decade1,decade2)
qqplot(decade1,decade2, distribution = qnorm)
qqline(decade1, datax = FALSE, distribution = qnorm,
probs = c(0.25, 0.75), qtype = 7, ...)
qqline(decade1, datax = FALSE, distribution = qnorm,
probs = c(0.25, 0.75), qtype = 7)
qqline(decade1, datax = TRUE, distribution = qnorm,
probs = c(0.25, 0.75), qtype = 7)
qqline(decade1, datax = FALSE, distribution = qnorm,
probs = c(0.25, 0.75), qtype = 6)
qqline(decade1, datax = FALSE, distribution = qnorm, probs = c(0.25, 0.75))
qqplot(decade1,decade2)
qqplot(decade1,decade2, xlim = c(0,20), ylim = c(0,20))
qqline(decade1, datax = FALSE, distribution = qnorm, probs = c(0.25, 0.75))
max(c(decade1,decade2))
qqplot(decade1,decade2, xlim = c(0,max(c(decade1,decade2))), ylim = c(0,max(c(decade1,decade2))))
qqline(decade1,distribution = qnorm)
qqline(decade2,distribution = qnorm)
abline()
abline(0, 1)
require(ggplot2)
install.packages("ggplot2")
require(ggplot2)
g = ggplot()
+ geom_point(aes(x=decade1, y=decade2))
g = ggplot() + geom_point(aes(x=decade1, y=decade2))
g
##Generate Random Data
#Each record is in instance that captures the number of AMR genes
decade1 <- round(rchisq(100,2))
decade2 <- round(rchisq(300,5))
##Plot the data
#Generate plot with axes bound to maximum value in data
qqplot(decade1,decade2, xlim = c(0,max(c(decade1,decade2))), ylim = c(0,max(c(decade1,decade2))))
#Add y=x line for comparison
abline(0, 1)
##Generate Random Data
#Each record is in instance that captures the number of AMR genes
decade1 <- round(rchisq(100,2))
decade2 <- round(rchisq(300,5))
##Plot the data
#Generate plot with axes bound to maximum value in data
qqplot(decade1,decade2, xlim = c(0,max(c(decade1,decade2))), ylim = c(0,max(c(decade1,decade2))))
#Add y=x line for comparison
abline(0, 1)
##Generate Random Data
#Each record is in instance that captures the number of AMR genes
decade1 <- round(rchisq(100,2))
decade2 <- round(rchisq(300,5))
##Plot the data
#Generate plot with axes bound to maximum value in data
qqplot(decade1,decade2, xlim = c(0,max(c(decade1,decade2))), ylim = c(0,max(c(decade1,decade2))))
#Add y=x line for comparison
abline(0, 1)
install.packages("DT")
library(DT)
install.packages("XML")
setwd("..\Desktop/EBEN")
setwd("..\Desktop\EBEN")
setwd("../Desktop/EBEN")
gewd()
getwd()
setwd("../../Documents/DARPALanguageViz_ColbyFord-1-/Bantu/")
("BantuBantoid_frequency_redone.xls")
bantu <- read_excel("BantuBantoid_frequency_redone.xls") #for Bantu
library(readxl)
install.packages("readxl")
library(readxl)
bantu <- read_excel("BantuBantoid_frequency_redone.xls") #for Bantu
View(bantu)
tbantu <- t(bantu)
tbantu <- as.data.frame(t(bantu))
View(tbantu)
setwd("~/DARPALanguageViz_ColbyFord-1-")
library(dplyr)
library(readxl)
library(reshape2)
install.package("dplyr)")
install.packages("dplyr")
data <- read_excel("Uto-Aztecan/UT-sound-freqs.xlsx") #for Uto-Aztecan
tdata <- as.data.frame(t(data))
colnames(tdata) <- as.character(unlist(tdata[1,]))
tdata <- tdata[-1,]
dataclust <- (kmeans(
tdata,
3,
iter.max = 10000,
algorithm = "Lloyd"
)
)$cluster
hist(dataclust)  #Check cluster distribution
tdata$cluster <- factor(as.character(dataclust))  #Join cluster information back to matrix
meltdata <- melt(tdata, id = "cluster", measured = c(colnames(tdata)))
meltdata$value <- as.numeric(meltdata$value) #Fix for value being characterized
pivotdata <- as.data.frame(acast(meltdata, variable~cluster, mean))
colnames(pivotdata) <- c("Cluster1", "Cluster2", "Cluster3")
pivotdata$Language <- row.names(pivotdata)
View(pivotdata)
library(openxlsx)
install.packages("openxlsx")
write.xlsx(pivotdata, file = "UACluster.xlsx",colNames = TRUE, rowNames = TRUE)
?openxlsx
library(openxlsx)
write.xlsx(pivotdata, file = "UACluster.xlsx",colNames = TRUE, rowNames = TRUE)
install.packages("Rtools")
write.csv(pivotdata, file = "Uto-Aztecan/UACluster.csv", row.names = TRUE, col.names = TRUE)
#Read in file
data <- read_excel("Bantu/BantuBantoid_frequency_redone.xls") #for Bantu
data <- read_excel("Uto-Aztecan/UT-sound-freqs.xlsx") #for Uto-Aztecan
data <- read_excel("Combined/BantuAndUto-Aztecan_Frequencies.xlsx") #for the combined set
#Transpose the matrix to get languages as columns and sounds as rows
tdata <- as.data.frame(t(data))
colnames(tdata) <- as.character(unlist(tdata[1,]))
tdata <- tdata[-1,]
#Perform K-Means Clustering
dataclust <- (kmeans(
tdata,
3,
iter.max = 10000,
algorithm = "Lloyd"
)
)$cluster
hist(dataclust)  #Check cluster distribution
tdata$cluster <- factor(as.character(dataclust))  #Join cluster information back to matrix
#Pivot the data
meltdata <- melt(tdata, id = "cluster", measured = c(colnames(tdata)))
meltdata$value <- as.numeric(meltdata$value) #Fix for value being characterized
pivotdata <- as.data.frame(acast(meltdata, variable~cluster, mean))
colnames(pivotdata) <- c("Cluster1", "Cluster2", "Cluster3")
pivotdata$Language <- row.names(pivotdata)
View(pivotdata)
write.csv(pivotdata, file = "Combined/CombinedCluster.csv", row.names = TRUE, col.names = TRUE)
